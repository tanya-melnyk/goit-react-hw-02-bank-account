{"version":3,"sources":["theme/globalStyle.js","Balance/Balance.js","Controls/Controls.js","TransactionHistory/TransactionHistory.js","Dashboard/Dashboard.js","App/App.js","index.js"],"names":["GlobalStyle","createGlobalStyle","Section","styled","p","Item","span","Emoji","formatedNumber","num","parseFloat","Math","round","toFixed","Balance","balance","income","expenses","role","aria-label","section","Button","button","Input","input","Controls","state","inputValue","handleInput","e","amount","Number","target","value","setState","handleDeposit","props","onDeposit","reset","handleWithdraw","onWithdraw","this","type","name","onChange","onClick","Component","Table","table","TableHead","th","Column","td","TypeColumn","TransactionHistory","items","map","transaction","key","id","date","Container","div","notifyMsg","zeroAmount","notEnaughMoney","Dashboard","transactions","toast","info","newTransaction","uuidv1","Date","toLocaleString","warning","transactionType","filter","reduce","sum","totalIncome","countTotalSumOf","totalExpenses","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e470df7e.chunk.js","sourcesContent":["import { createGlobalStyle } from 'styled-components';\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\nhtml {\r\n  box-sizing: border-box;\r\n}\r\n\r\n*,\r\n*::before,\r\n*::after {\r\n  box-sizing: inherit;\r\n}\r\n\r\nbody {\r\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto,\r\n    Oxygen-Sans, Ubuntu, Cantarell, 'Helvetica Neue', sans-serif;\r\n  font-size: 16px;\r\n}\r\n`;\r\n\r\nexport default GlobalStyle;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport T from 'prop-types';\r\n\r\nconst Section = styled.p`\r\n  padding: 16px;\r\n  text-align: center;\r\n  font-size: 14px;\r\n  font-weight: 700;\r\n  color: #666;\r\n`;\r\n\r\nconst Item = styled.span`\r\n  margin-right: 20px;\r\n`;\r\n\r\nconst Emoji = styled.span`\r\n  margin-right: 2px;\r\n`;\r\n\r\nconst formatedNumber = num =>\r\n  parseFloat(Math.round(num * 100) / 100).toFixed(2);\r\n\r\nconst Balance = ({ balance, income, expenses }) => {\r\n  return (\r\n    <Section>\r\n      <Item>\r\n        <Emoji>\r\n          <span role=\"img\" aria-label=\"upward arrow\">\r\n            ⬆️\r\n          </span>\r\n        </Emoji>\r\n        {formatedNumber(income)}$\r\n      </Item>\r\n      <Item>\r\n        <Emoji>\r\n          <span role=\"img\" aria-label=\"downward arrow\">\r\n            ⬇️\r\n          </span>\r\n        </Emoji>\r\n        {formatedNumber(expenses)}$\r\n      </Item>\r\n      <span>Balance: {formatedNumber(balance)}$</span>\r\n    </Section>\r\n  );\r\n};\r\n\r\nBalance.propTypes = {\r\n  balance: T.number.isRequired,\r\n  income: T.number.isRequired,\r\n  expenses: T.number.isRequired,\r\n};\r\n\r\nexport default Balance;\r\n","import React, { Component } from 'react';\r\nimport styled from 'styled-components';\r\nimport T from 'prop-types';\r\n\r\nconst Section = styled.section`\r\n  display: flex;\r\n  justify-content: center;\r\n  padding: 40px;\r\n  background-color: #002757;\r\n`;\r\n\r\nconst Button = styled.button`\r\n  display: inline-block;\r\n  min-width: 144px;\r\n  border: 0;\r\n  padding: 4px 16px;\r\n  margin-left: 16px;\r\n  background-color: #3884ff;\r\n  border-radius: 3px;\r\n  transition: all 200ms ease;\r\n  font-family: inherit;\r\n  font-size: 14px;\r\n  font-weight: 500;\r\n  line-height: 24px;\r\n  font-style: normal;\r\n  text-align: center;\r\n  text-decoration: none;\r\n  color: #fff;\r\n  cursor: pointer;\r\n\r\n  :hover,\r\n  :focus {\r\n    background-color: #1f65d6;\r\n  }\r\n`;\r\n\r\nconst Input = styled.input`\r\n  min-width: 200px;\r\n  border-radius: 3px;\r\n  border: none;\r\n  text-indent: 0.4rem;\r\n`;\r\n\r\nexport default class Controls extends Component {\r\n  static propTypes = {\r\n    onDeposit: T.func.isRequired,\r\n    onWithdraw: T.func.isRequired,\r\n  };\r\n\r\n  state = {\r\n    inputValue: '',\r\n  };\r\n\r\n  handleInput = e => {\r\n    const amount = Number(e.target.value);\r\n    this.setState({ inputValue: amount });\r\n  };\r\n\r\n  handleDeposit = () => {\r\n    this.props.onDeposit(this.state.inputValue);\r\n\r\n    this.reset();\r\n  };\r\n\r\n  handleWithdraw = () => {\r\n    this.props.onWithdraw(this.state.inputValue);\r\n\r\n    this.reset();\r\n  };\r\n\r\n  reset = () => {\r\n    this.setState({ inputValue: '' });\r\n  };\r\n\r\n  render() {\r\n    const { inputValue } = this.state;\r\n\r\n    return (\r\n      <Section>\r\n        <Input\r\n          type=\"number\"\r\n          name=\"amount\"\r\n          value={inputValue}\r\n          onChange={this.handleInput}\r\n        />\r\n        <Button type=\"button\" onClick={this.handleDeposit}>\r\n          Deposit\r\n        </Button>\r\n        <Button type=\"button\" onClick={this.handleWithdraw}>\r\n          Withdraw\r\n        </Button>\r\n      </Section>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport T from 'prop-types';\r\n\r\nconst Table = styled.table`\r\n  margin: 0 auto;\r\n  box-shadow: 0px 1px 4px 0px rgba(184, 184, 184, 1);\r\n  border-width: 1px;\r\n  border-collapse: collapse;\r\n  border-radius: 2px;\r\n  overflow: hidden;\r\n`;\r\n\r\nconst TableHead = styled.th`\r\n  padding: 14px 50px;\r\n  width: 33.3%;\r\n  background-color: #eef0f5;\r\n  font-size: 12px;\r\n  font-weight: 700;\r\n  text-transform: uppercase;\r\n  letter-spacing: 0.08em;\r\n  text-align: center;\r\n  border-right: 1px solid #fff;\r\n  :last-child {\r\n    border-right: none;\r\n  }\r\n`;\r\n\r\nconst Column = styled.td`\r\n  width: 33.3%;\r\n  padding: 10px 50px;\r\n  font-size: 14px;\r\n  text-align: center;\r\n  border: 1px solid #eef0f5;\r\n  color: #85888a;\r\n`;\r\n\r\nconst TypeColumn = styled(Column)`\r\n  padding-left: 70px;\r\n  text-transform: capitalize;\r\n  text-align: left;\r\n`;\r\n\r\nconst formatedNumber = num =>\r\n  parseFloat(Math.round(num * 100) / 100).toFixed(2);\r\n\r\nconst TransactionHistory = ({ items }) => {\r\n  return (\r\n    <Table>\r\n      <thead>\r\n        <tr>\r\n          <TableHead>Transaction</TableHead>\r\n          <TableHead>Amount</TableHead>\r\n          <TableHead>Date</TableHead>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {items.map(transaction => (\r\n          <tr key={transaction.id}>\r\n            <TypeColumn>{transaction.type}</TypeColumn>\r\n            <Column>{formatedNumber(transaction.amount)}$</Column>\r\n            <Column>{transaction.date}</Column>\r\n          </tr>\r\n        ))}\r\n      </tbody>\r\n    </Table>\r\n  );\r\n};\r\n\r\nTransactionHistory.propTypes = {\r\n  items: T.arrayOf(\r\n    T.shape({\r\n      id: T.string.isRequired,\r\n      type: T.string.isRequired,\r\n      amount: T.number.isRequired,\r\n      date: T.string.isRequired,\r\n    }).isRequired,\r\n  ).isRequired,\r\n};\r\n\r\nexport default TransactionHistory;\r\n","import React, { Component } from 'react';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport styled from 'styled-components';\r\nimport uuidv1 from 'uuid/v1';\r\n\r\nimport Balance from '../Balance';\r\nimport Controls from '../Controls';\r\nimport TransactionHistory from '../TransactionHistory';\r\n\r\nconst Container = styled.div`\r\n  max-width: 800px;\r\n  margin: 0 auto;\r\n`;\r\n\r\nconst notifyMsg = {\r\n  zeroAmount: '⬅️ Enter some amount to create a transaction!',\r\n  notEnaughMoney:\r\n    '❗️ There are not enough funds on the account to make a withdrawal!',\r\n};\r\n\r\nexport default class Dashboard extends Component {\r\n  state = {\r\n    transactions: [],\r\n    balance: 0,\r\n  };\r\n\r\n  handleDeposit = amount => {\r\n    this.setState(({ transactions, balance }) => {\r\n      if (amount === 0 || amount === '') {\r\n        toast.info(notifyMsg.zeroAmount);\r\n        return { transactions, balance };\r\n      }\r\n\r\n      const newTransaction = {\r\n        id: uuidv1(),\r\n        type: 'deposit',\r\n        amount,\r\n        date: new Date().toLocaleString(),\r\n      };\r\n\r\n      return {\r\n        transactions: [...transactions, newTransaction],\r\n        balance: balance + amount,\r\n      };\r\n    });\r\n  };\r\n\r\n  handleWithdraw = amount => {\r\n    this.setState(({ transactions, balance }) => {\r\n      if (balance < amount) {\r\n        toast.warning(notifyMsg.notEnaughMoney);\r\n        return { transactions, balance };\r\n      }\r\n\r\n      if (amount === 0 || amount === '') {\r\n        toast.info(notifyMsg.zeroAmount);\r\n        return { transactions, balance };\r\n      }\r\n\r\n      const newTransaction = {\r\n        id: uuidv1(),\r\n        type: 'withdrawal',\r\n        amount,\r\n        date: new Date().toLocaleString(),\r\n      };\r\n\r\n      return {\r\n        transactions: [...transactions, newTransaction],\r\n        balance: balance - amount,\r\n      };\r\n    });\r\n  };\r\n\r\n  countTotalSumOf(transactionType) {\r\n    const { transactions } = this.state;\r\n\r\n    return transactions\r\n      .filter(transaction => transaction.type === transactionType)\r\n      .reduce((sum, transaction) => sum + transaction.amount, 0);\r\n  }\r\n\r\n  render() {\r\n    const { transactions, balance } = this.state;\r\n    const totalIncome = this.countTotalSumOf('deposit');\r\n    const totalExpenses = this.countTotalSumOf('withdrawal');\r\n\r\n    return (\r\n      <Container>\r\n        <Controls\r\n          onDeposit={this.handleDeposit}\r\n          onWithdraw={this.handleWithdraw}\r\n        />\r\n        <Balance\r\n          balance={balance}\r\n          income={totalIncome}\r\n          expenses={totalExpenses}\r\n        />\r\n        <TransactionHistory items={transactions} />\r\n        <ToastContainer />\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\n\r\nimport GlobalStyle from '../theme/globalStyle';\r\nimport Dashboard from '../Dashboard';\r\n\r\nconst App = () => (\r\n  <>\r\n    <GlobalStyle />\r\n    <Dashboard />\r\n  </>\r\n);\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}